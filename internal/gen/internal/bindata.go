// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/_enum.maptoent.tmpl_
// template/enum.maptoproto.tmpl
// template/enum.tmpl
// template/import.tmpl
// template/mapper.tmpl
// template/protobuf.tmpl
// template/uuid.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _template_enumMaptoentTmpl_ = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x4b\x99\xc5\x4c\xa1\xf9\x00\xc1\x65\x05\x17\x05\xc1\x8a\x4b\x79\x36\x2f\x6d\x70\xf2\x26\x24\x6f\x10\x79\xe4\xdf\x85\xe2\xe0\xee\x70\x0f\x5c\x8e\x19\x02\xc7\x24\x8c\x1d\xcb\x9a\x33\x15\x5d\x58\x74\x87\x43\xef\xce\x0c\x95\xe4\xca\x18\x22\x1e\x1e\x31\xf8\xa7\xc4\x73\x68\x9b\x4b\x11\x43\xf4\xcf\xed\x28\x6b\xbe\x6f\x71\x95\x0b\xc6\x8a\xbd\x19\xfc\x39\xe9\xcc\xbd\x9f\xa8\x14\xae\x13\xa0\x8b\x99\xd6\x94\x5f\xe8\xf2\x45\xf7\x4f\x7f\xfe\x29\xec\x5f\xb5\x26\xb9\x62\xf0\x9b\x38\xf4\x7e\x14\x1d\x27\x8c\x0d\xfb\x40\x4a\x9f\xd4\xd8\xbf\x35\xae\xef\x49\x6f\xa1\xd2\x37\xcd\xed\xe3\xc4\x7a\x5b\xc2\xe4\xcc\x58\xc2\x5f\xd1\x3f\x61\x43\xe7\xdc\x6f\x00\x00\x00\xff\xff\x02\x6f\xd5\x3f\xe3\x00\x00\x00")

func template_enumMaptoentTmpl_Bytes() ([]byte, error) {
	return bindataRead(
		_template_enumMaptoentTmpl_,
		"template/_enum.maptoent.tmpl_",
	)
}

func template_enumMaptoentTmpl_() (*asset, error) {
	bytes, err := template_enumMaptoentTmpl_Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/_enum.maptoent.tmpl_", size: 227, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateEnumMaptoprotoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x4b\xf4\x30\x10\xbd\xf7\x57\x3c\x4a\x0e\xdd\x8f\x6f\xf3\x03\x84\x1e\x57\xf0\xa0\x08\xee\x5d\xb2\xed\x64\x89\x6e\x93\x90\xa4\x82\x0c\xf9\xef\x92\xda\x14\x15\x85\xcd\x29\x99\x79\x79\x33\xef\x3d\x66\x8c\xa4\x8d\x25\xb4\x64\xe7\x69\x52\x3e\x39\x1f\x5c\x72\x2d\xf6\x39\x37\xcc\x08\xca\x9e\x09\x42\xe3\xa6\x87\x90\xb7\x86\x2e\x63\x5c\x7a\x00\xc0\x0c\xa3\x21\xb4\xbc\x8b\x07\x3b\x4f\x4b\x5d\xcf\x76\x40\x17\xf0\x8f\x19\x42\x1e\x4d\xba\x50\xce\xf7\xca\x7b\x0a\x3b\x20\x39\xe6\x14\xcc\xf4\xa8\x86\x57\xb5\x10\xcb\xe3\xbb\x27\xf9\x94\x82\xb1\x67\x08\x59\x1b\x39\x1f\x6c\xea\xdc\xe9\x05\xcc\xdf\x41\x39\xef\xd0\x45\x44\x0a\x6f\x14\xfc\x49\x32\x6f\x63\x9e\x99\x81\x6b\xe8\x0b\x07\x37\x55\x83\x28\xda\x8b\xc0\xab\x36\xab\xe2\xeb\x61\xde\x57\x97\x06\x37\xdb\xf4\x1f\x82\x16\xb7\xb4\x2c\xa6\x44\xfc\xc0\x6f\x9f\x84\x55\xd3\x57\xe4\x43\x79\x0a\xda\xf0\x46\xa3\x18\xb0\x6e\xd0\xed\xd0\xf7\x68\x99\x05\xe5\xdc\xa2\xec\x5f\xc9\x22\xfa\xbf\xed\xf8\x9c\xb2\x72\xd6\xd8\xf6\x20\x3b\xd6\x62\xa0\x34\x07\x8b\xd8\x2c\x81\x97\xc6\x9a\xfd\x2f\xd7\xe6\x23\x00\x00\xff\xff\x06\x7d\x68\x65\x32\x02\x00\x00")

func templateEnumMaptoprotoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumMaptoprotoTmpl,
		"template/enum.maptoproto.tmpl",
	)
}

func templateEnumMaptoprotoTmpl() (*asset, error) {
	bytes, err := templateEnumMaptoprotoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enum.maptoproto.tmpl", size: 562, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateEnumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x4a\xc5\x30\x10\x85\xd7\xf6\x29\x0e\x97\x59\x7a\xf3\x00\x4a\x97\x0a\x6e\x44\xd0\x17\x08\xed\xa4\x04\xcd\x28\xfd\x59\xc8\x30\xef\x2e\x49\x9b\x52\xb9\xcd\x2a\x33\x73\xbe\xc9\x47\x54\xd1\x73\x88\xc2\xb8\xb0\x2c\xe9\x82\xab\x59\xa3\x8a\xd1\xcb\xc0\xa0\x80\x87\x16\xe4\x9e\x23\x7f\xf5\x53\x99\xdd\xa9\x22\x06\x50\x70\x2f\xd3\x93\x2c\x69\x6d\x02\x80\x2a\x28\xef\xc8\xc8\x3c\xc6\xf4\xe6\xbb\x4f\x5f\x96\xb8\x8f\xdf\x1f\x76\xef\xf3\x18\x65\x00\xb9\x3a\xd8\xc9\x42\xed\xb8\x19\xb4\xc1\xe1\xa8\x5e\xab\x4f\xf7\xbd\xc8\x7c\x0f\xe2\xe2\x15\x5c\x36\x98\x60\xf6\x2f\x5f\x19\x12\x9f\x8e\xc1\xd7\x5c\x12\x9f\xc7\xb7\xb4\x19\xda\x52\x95\x97\xcc\x1e\x6f\x4c\x58\x7a\x54\xf1\x75\x91\x6a\x69\x6e\x3f\x77\x72\x6d\xfe\x02\x00\x00\xff\xff\xb1\x82\x8a\x99\x66\x01\x00\x00")

func templateEnumTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumTmpl,
		"template/enum.tmpl",
	)
}

func templateEnumTmpl() (*asset, error) {
	bytes, err := templateEnumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enum.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImportTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x2d\xc8\x2f\x2a\x51\x52\xa8\xad\xe5\xaa\xae\xd6\x55\x28\xcf\x2c\xc9\x50\x50\xc9\x4c\xa9\x50\xb0\xb2\x55\xd0\xf3\x04\x4b\xba\xa6\xa4\xa7\x16\x83\x14\x28\x28\x28\x28\x80\x14\x15\x25\xe6\xa5\xa7\x2a\xa8\x64\x82\xd4\x80\xd5\xd6\xd6\x72\x41\xcc\x51\x50\xaa\xae\x06\x49\xd4\xd6\x2a\x59\x43\x95\x2b\xa4\xe6\xa5\x40\x4c\xc7\x60\x01\x02\x00\x00\xff\xff\xb5\xef\x88\x03\x87\x00\x00\x00")

func templateImportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImportTmpl,
		"template/import.tmpl",
	)
}

func templateImportTmpl() (*asset, error) {
	bytes, err := templateImportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/import.tmpl", size: 135, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMapperTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\xdf\x6b\xdb\x30\x10\xc7\x9f\xa3\xbf\xe2\x30\x61\x38\xa5\x95\x61\x1b\x7b\x18\xe4\xad\x2d\xeb\x20\x5d\xa1\xe9\x5e\x4a\x29\x72\xa2\xb8\x6a\xad\x1f\xc8\x72\x46\x10\xfa\xdf\x87\xec\xd8\x71\x57\x3b\xb6\xbb\xb1\x87\x42\x6d\xdd\x7d\xbf\x77\x97\xd3\x07\x5b\xbb\xa6\x1b\x26\x28\x04\x9c\x28\x45\x75\x00\x67\xce\x21\x45\x56\x2f\x24\xa1\x50\xbe\x43\x88\x71\x25\xb5\x81\x10\x4d\xac\x05\xb6\x01\xfc\x8d\x64\x4b\xc6\xa9\x0f\x0e\x12\x66\x9e\xf2\x18\xaf\x24\x8f\x12\x99\x12\x91\x44\x4a\x4b\x23\xe3\x7c\x13\x29\xb3\x53\x34\x0b\xc0\x5a\xa0\x62\x0d\xce\xa1\x49\x33\xfc\x45\xef\x94\x91\x6b\xa6\xe9\xca\x44\x6b\x62\x48\x4c\x32\x1a\x1c\x89\x29\x1f\xce\x0a\xfd\x28\x91\x51\x46\xf5\x96\x6a\x15\x07\xe8\x50\xd7\x85\xc8\xf9\x9f\x75\xb5\x1a\x45\xd6\xe2\x9b\xb2\x51\xe7\x82\x46\x89\x07\xad\xef\xb7\x3f\xae\x0b\x2d\x2a\x56\x72\xcd\x44\x12\x3d\x67\x52\x34\x62\x67\x08\x21\xdf\xa3\xef\x10\x2f\x99\x49\xa9\x73\x8b\x62\x68\x90\x19\x9d\xaf\x0c\x58\x87\x36\xb9\x58\xc1\x35\xfd\xf5\x26\x26\x9c\xc1\x49\xfd\x12\xea\x4c\x8b\x26\x9a\x9a\x5c\x0b\xf8\xf0\xf6\xd4\x3a\xe4\x50\x29\x19\xea\x46\x7a\x75\x3e\x83\x05\x51\x17\xc2\x2c\xe5\x8d\x9f\x52\x28\xe3\x67\x38\xa9\x5a\xc6\x4d\xbd\x19\x84\x1c\x4e\xaa\x11\xbe\x3a\x3a\x05\xaa\xb5\xff\x93\x7a\x06\x16\xf9\x91\x68\x22\x12\x0a\xd3\xc7\x53\x98\x6e\xe1\xeb\x1c\xf0\x25\xa3\xe9\x3a\xf3\xf3\xda\x0f\x6c\xba\xc5\x57\xf5\x56\x00\xf7\x82\xfe\xdd\x6d\x31\x87\x22\xba\xa8\xa8\x52\x87\x39\x94\xeb\x81\x7d\x4e\x66\x08\x57\x65\xc5\xd6\x4e\xb7\xf8\x5c\x5e\xb3\x34\x25\xb1\x6f\x4c\xc6\xcf\x2d\x62\xce\xcd\x4a\x6b\x9a\x66\xb4\xf6\xbf\xbb\xbb\x3a\xef\xf3\xc7\x3f\x49\x9a\x53\x98\x43\x97\xb0\x7f\x62\x22\x09\xdb\x0c\x9a\xf2\xad\xea\x30\x87\x37\x1d\x30\x61\xbe\x7c\x0e\xc7\xf4\x71\x25\xcc\x7f\xf1\xb9\x4c\x25\x79\x8f\xd3\xc6\xe7\x7d\xfa\x38\xca\xab\xba\x99\xc7\xad\x34\x36\xd2\x5a\xa3\x19\xdf\x5f\x4e\x1f\xb9\xdc\x29\xba\xff\x55\x60\x5a\xdd\x5a\x70\xee\x42\x98\xbf\xdb\x97\xea\x86\x1f\xa9\xa9\x5c\xd7\x96\x19\x78\x16\xe0\x05\xd1\xd9\x13\x49\x07\x0d\xa2\x67\x2f\xdb\x3c\xba\x64\xe1\x35\xaf\xfc\xbf\x1e\xdc\x35\x39\x78\x51\x35\x72\xc3\x49\xb1\x20\x62\x57\xd0\xe2\xfe\xe1\x08\x2f\xee\x1f\x06\x11\x63\xb2\x91\x1a\xd8\x29\x3c\x7a\x54\x94\xe8\xf0\xd2\xf6\x5d\x24\xb9\x67\x0f\x7d\x30\x19\xc3\x92\x76\xb9\x3e\x9c\x1c\x2d\xa2\x49\x94\x2e\xf9\x21\x50\xd9\xe7\x76\x6d\x47\x7d\xbd\xc7\xb4\x50\x93\xa4\x47\xbc\x1b\x26\x63\xdc\x1a\x3c\x19\xeb\xd7\x40\xca\x18\xc7\x03\x55\x7a\x0c\xff\x09\x58\xc6\x54\x76\x60\xcb\xb1\xca\x06\xe3\x65\x88\x75\xff\xaa\x76\x40\xa6\x4b\xbc\x83\x33\x93\x36\xd4\xa0\x96\xaf\x30\x9f\x6f\x28\x57\x29\x31\x14\x02\x2a\x72\xce\x89\x32\xb2\xf8\x82\x0b\x00\x30\x1c\x2c\xbc\x6e\x13\x65\xbf\x03\x00\x00\xff\xff\x5b\x0a\x0d\xca\x9b\x0a\x00\x00")

func templateMapperTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMapperTmpl,
		"template/mapper.tmpl",
	)
}

func templateMapperTmpl() (*asset, error) {
	bytes, err := templateMapperTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mapper.tmpl", size: 2715, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateProtobufTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x9e\x22\x1f\xba\x52\x37\x0b\xe5\xb6\x51\x24\x0e\x14\xa8\x44\x69\x25\xb6\xe7\x95\x77\x33\x1b\x4c\x13\x27\xc4\x4e\xa0\xb2\xfc\xef\x68\x1c\x9b\x6e\x85\x54\x91\x53\x66\x3c\xf3\xe6\xbd\x79\xe3\x5c\x4d\x27\xa5\x09\xf9\x30\xf6\xb6\x3f\x4c\xa7\x1c\x6b\xef\x33\xf3\xa4\xad\xfc\x8d\x2a\xe6\xdf\xe5\x65\x36\xc8\xe3\xa3\x6c\x08\xe6\xf8\x9d\x3a\x59\x66\xfd\x60\x55\xaf\xd1\xf4\xfb\xf4\x52\x21\x2f\x4a\x43\xe3\x4c\xe3\x70\xc8\xcb\x2c\x73\x0e\xea\x84\xe2\xb3\x34\x3b\xd5\x11\x03\xab\x6e\xe8\x47\x8b\xbc\xe9\xfb\xa6\xa5\x4d\x1a\xba\xb1\xaa\x23\x63\x65\x37\x14\x21\x95\x97\xce\x91\xae\xbd\x67\x08\x4b\xdd\xd0\x4a\x4b\xc8\x97\xee\x1c\x45\xe0\xf8\x8c\xfe\xf0\x70\xf3\x81\x53\x48\xf0\xd3\xa4\xea\x84\x04\xe7\x40\xba\x86\xf7\x59\x47\xc6\x30\x51\xe7\x50\xec\x94\x6d\x09\xde\xc3\x65\xce\x89\x63\x3f\x69\xbb\xad\xde\x04\xd8\x51\xea\x86\x20\xf6\x97\x10\x33\xb6\x15\x8a\x8f\x8a\xda\xda\x78\x9f\x01\x9b\x0d\xde\x2b\xfd\x83\x8e\x76\x6f\x65\xb3\x45\xee\x1c\x8c\x96\x8f\x04\x31\x17\xdf\xec\x38\x1d\x6d\xa8\xf6\x3e\xcf\x00\x24\x68\x54\x90\x75\x8d\x18\xbc\x0d\xfc\x11\xde\x59\x83\x98\x8b\x1b\x73\xad\xa7\xee\x3c\x2f\x88\x13\xdb\x0a\x76\x54\xdd\x7d\x5c\xb1\x98\x8b\xdd\xd3\x40\x3c\x49\xe9\x06\xa2\x48\x0f\xa9\x31\x34\xfd\xed\x0e\xf2\x10\x3f\xe7\xd6\x88\xd2\x02\x8d\xab\x4b\x08\xe2\x01\x62\x2e\x78\xb8\x41\xc4\x48\xc5\x42\xcb\xee\xbc\xe0\x2b\x87\x82\x5e\x96\xc5\x2a\xef\x51\x85\x68\x81\xf6\xbe\x7c\x01\x15\x0d\xe0\x30\x09\x64\x29\xec\x01\x73\xe4\xe0\x8b\x3c\x50\x1b\x61\x16\x94\x04\xc2\x06\xb6\x26\xcc\x58\x4a\xef\xe3\xd9\xf0\x2a\x5e\x6d\x3f\xf3\x3e\x1c\x54\xbc\x9b\x7f\x0c\xfe\x44\xfa\xba\x6e\x68\xb1\xf8\x3f\x4d\xbb\xe8\x47\x5e\xcc\xed\xd5\x2d\x2e\xa4\xae\x97\xff\x3b\x5c\xe8\xde\xf2\x3f\x9f\xa5\x56\x3f\x27\x5a\xad\x56\xe1\x36\x47\x1a\x48\x5a\xaa\x13\xa7\x75\x62\xce\x93\xef\x7e\x69\x1a\x5f\xdf\xc4\xb3\x80\x2c\xaa\xe1\xdf\x3f\x01\x00\x00\xff\xff\x88\x55\x5f\xdc\xc1\x03\x00\x00")

func templateProtobufTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateProtobufTmpl,
		"template/protobuf.tmpl",
	)
}

func templateProtobufTmpl() (*asset, error) {
	bytes, err := templateProtobufTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/protobuf.tmpl", size: 961, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUuidTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xb1\x0e\xc2\x20\x10\x06\xe0\xfd\x9e\xe2\xcf\xed\x9a\x18\x47\xd2\xcd\xc5\x07\xe8\x6c\xb0\x9c\x48\xb4\x40\x38\x68\x34\x84\x77\x37\x1d\x9c\xbf\xaf\x77\x38\x79\x84\x28\xe0\xd6\x82\x63\x1c\xc6\x20\xfd\xc6\x6a\x3f\x98\xc0\xb9\xa4\x9a\xce\x6c\x28\xdb\xe5\x65\xbd\x40\x97\xa7\xac\xd6\x50\xca\x35\xa4\x08\x9f\x6e\x7f\x99\xc0\x47\xa3\x52\x36\x29\xf9\xce\x86\x88\x56\x51\xdd\x65\x9e\xaf\x17\x74\x02\xb4\x96\x10\x3d\x36\xfb\x6e\xfb\x3f\x19\x1a\xd4\x3b\x24\x3a\x8c\xf1\x0b\x00\x00\xff\xff\xa0\x62\x4e\xad\x8a\x00\x00\x00")

func templateUuidTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUuidTmpl,
		"template/uuid.tmpl",
	)
}

func templateUuidTmpl() (*asset, error) {
	bytes, err := templateUuidTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/uuid.tmpl", size: 138, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/_enum.maptoent.tmpl_": template_enumMaptoentTmpl_,
	"template/enum.maptoproto.tmpl": templateEnumMaptoprotoTmpl,
	"template/enum.tmpl":            templateEnumTmpl,
	"template/import.tmpl":          templateImportTmpl,
	"template/mapper.tmpl":          templateMapperTmpl,
	"template/protobuf.tmpl":        templateProtobufTmpl,
	"template/uuid.tmpl":            templateUuidTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"_enum.maptoent.tmpl_": &bintree{template_enumMaptoentTmpl_, map[string]*bintree{}},
		"enum.maptoproto.tmpl": &bintree{templateEnumMaptoprotoTmpl, map[string]*bintree{}},
		"enum.tmpl":            &bintree{templateEnumTmpl, map[string]*bintree{}},
		"import.tmpl":          &bintree{templateImportTmpl, map[string]*bintree{}},
		"mapper.tmpl":          &bintree{templateMapperTmpl, map[string]*bintree{}},
		"protobuf.tmpl":        &bintree{templateProtobufTmpl, map[string]*bintree{}},
		"uuid.tmpl":            &bintree{templateUuidTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
