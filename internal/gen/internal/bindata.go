// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/_enum.maptoent.tmpl_
// template/enum.maptoproto.tmpl
// template/enum.tmpl
// template/import.tmpl
// template/mapper.tmpl
// template/protobuf.tmpl
// template/uuid.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _template_enumMaptoentTmpl_ = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x4b\x99\xc5\x4c\xa1\xf9\x00\xc1\x65\x05\x17\x05\xc1\x8a\x4b\x79\x36\x2f\x6d\x70\xf2\x26\x24\x6f\x10\x79\xe4\xdf\x85\xe2\xe0\xee\x70\x0f\x5c\x8e\x19\x02\xc7\x24\x8c\x1d\xcb\x9a\x33\x15\x5d\x58\x74\x87\x43\xef\xce\x0c\x95\xe4\xca\x18\x22\x1e\x1e\x31\xf8\xa7\xc4\x73\x68\x9b\x4b\x11\x43\xf4\xcf\xed\x28\x6b\xbe\x6f\x71\x95\x0b\xc6\x8a\xbd\x19\xfc\x39\xe9\xcc\xbd\x9f\xa8\x14\xae\x13\xa0\x8b\x99\xd6\x94\x5f\xe8\xf2\x45\xf7\x4f\x7f\xfe\x29\xec\x5f\xb5\x26\xb9\x62\xf0\x9b\x38\xf4\x7e\x14\x1d\x27\x8c\x0d\xfb\x40\x4a\x9f\xd4\xd8\xbf\x35\xae\xef\x49\x6f\xa1\xd2\x37\xcd\xed\xe3\xc4\x7a\x5b\xc2\xe4\xcc\x58\xc2\x5f\xd1\x3f\x61\x43\xe7\xdc\x6f\x00\x00\x00\xff\xff\x02\x6f\xd5\x3f\xe3\x00\x00\x00")

func template_enumMaptoentTmpl_Bytes() ([]byte, error) {
	return bindataRead(
		_template_enumMaptoentTmpl_,
		"template/_enum.maptoent.tmpl_",
	)
}

func template_enumMaptoentTmpl_() (*asset, error) {
	bytes, err := template_enumMaptoentTmpl_Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/_enum.maptoent.tmpl_", size: 227, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateEnumMaptoprotoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x4b\xf4\x30\x10\xbd\xf7\x57\x3c\x4a\x0e\xdd\x8f\x6f\xf3\x03\x84\x1e\x57\xf0\xa0\x08\xee\x5d\xb2\xed\x64\x89\x6e\x93\x90\xa4\x82\x0c\xf9\xef\x92\xda\x14\x15\x85\xcd\x29\x99\x79\x79\x33\xef\x3d\x66\x8c\xa4\x8d\x25\xb4\x64\xe7\x69\x52\x3e\x39\x1f\x5c\x72\x2d\xf6\x39\x37\xcc\x08\xca\x9e\x09\x42\xe3\xa6\x87\x90\xb7\x86\x2e\x63\x5c\x7a\x00\xc0\x0c\xa3\x21\xb4\xbc\x8b\x07\x3b\x4f\x4b\x5d\xcf\x76\x40\x17\xf0\x8f\x19\x42\x1e\x4d\xba\x50\xce\xf7\xca\x7b\x0a\x3b\x20\x39\xe6\x14\xcc\xf4\xa8\x86\x57\xb5\x10\xcb\xe3\xbb\x27\xf9\x94\x82\xb1\x67\x08\x59\x1b\x39\x1f\x6c\xea\xdc\xe9\x05\xcc\xdf\x41\x39\xef\xd0\x45\x44\x0a\x6f\x14\xfc\x49\x32\x6f\x63\x9e\x99\x81\x6b\xe8\x0b\x07\x37\x55\x83\x28\xda\x8b\xc0\xab\x36\xab\xe2\xeb\x61\xde\x57\x97\x06\x37\xdb\xf4\x1f\x82\x16\xb7\xb4\x2c\xa6\x44\xfc\xc0\x6f\x9f\x84\x55\xd3\x57\xe4\x43\x79\x0a\xda\xf0\x46\xa3\x18\xb0\x6e\xd0\xed\xd0\xf7\x68\x99\x05\xe5\xdc\xa2\xec\x5f\xc9\x22\xfa\xbf\xed\xf8\x9c\xb2\x72\xd6\xd8\xf6\x20\x3b\xd6\x62\xa0\x34\x07\x8b\xd8\x2c\x81\x97\xc6\x9a\xfd\x2f\xd7\xe6\x23\x00\x00\xff\xff\x06\x7d\x68\x65\x32\x02\x00\x00")

func templateEnumMaptoprotoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumMaptoprotoTmpl,
		"template/enum.maptoproto.tmpl",
	)
}

func templateEnumMaptoprotoTmpl() (*asset, error) {
	bytes, err := templateEnumMaptoprotoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enum.maptoproto.tmpl", size: 562, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateEnumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x4a\xc5\x30\x10\x85\xd7\xf6\x29\x0e\x97\x59\x7a\xf3\x00\x4a\x97\x0a\x6e\x44\xd0\x17\x08\xed\xa4\x04\xcd\x28\xfd\x59\xc8\x30\xef\x2e\x49\x9b\x52\xb9\xcd\x2a\x33\x73\xbe\xc9\x47\x54\xd1\x73\x88\xc2\xb8\xb0\x2c\xe9\x82\xab\x59\xa3\x8a\xd1\xcb\xc0\xa0\x80\x87\x16\xe4\x9e\x23\x7f\xf5\x53\x99\xdd\xa9\x22\x06\x50\x70\x2f\xd3\x93\x2c\x69\x6d\x02\x80\x2a\x28\xef\xc8\xc8\x3c\xc6\xf4\xe6\xbb\x4f\x5f\x96\xb8\x8f\xdf\x1f\x76\xef\xf3\x18\x65\x00\xb9\x3a\xd8\xc9\x42\xed\xb8\x19\xb4\xc1\xe1\xa8\x5e\xab\x4f\xf7\xbd\xc8\x7c\x0f\xe2\xe2\x15\x5c\x36\x98\x60\xf6\x2f\x5f\x19\x12\x9f\x8e\xc1\xd7\x5c\x12\x9f\xc7\xb7\xb4\x19\xda\x52\x95\x97\xcc\x1e\x6f\x4c\x58\x7a\x54\xf1\x75\x91\x6a\x69\x6e\x3f\x77\x72\x6d\xfe\x02\x00\x00\xff\xff\xb1\x82\x8a\x99\x66\x01\x00\x00")

func templateEnumTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumTmpl,
		"template/enum.tmpl",
	)
}

func templateEnumTmpl() (*asset, error) {
	bytes, err := templateEnumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enum.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateImportTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x2d\xc8\x2f\x2a\x51\x52\xa8\xad\xe5\xaa\xae\xd6\x55\x28\xcf\x2c\xc9\x50\x50\xc9\x4c\xa9\x50\xb0\xb2\x55\xd0\xf3\x04\x4b\xba\xa6\xa4\xa7\x16\x83\x14\x28\x28\x28\x28\x80\x14\x15\x25\xe6\xa5\xa7\x2a\xa8\x64\x82\xd4\x80\xd5\xd6\xd6\x72\x41\xcc\x51\x50\xaa\xae\x06\x49\xd4\xd6\x2a\x59\x43\x95\x2b\xa4\xe6\xa5\x40\x4c\xc7\x60\x01\x02\x00\x00\xff\xff\xb5\xef\x88\x03\x87\x00\x00\x00")

func templateImportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateImportTmpl,
		"template/import.tmpl",
	)
}

func templateImportTmpl() (*asset, error) {
	bytes, err := templateImportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/import.tmpl", size: 135, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMapperTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\xdf\x6b\xdb\x3a\x14\xc7\x9f\xad\xbf\xe2\x5c\x13\x8a\x5d\x52\x1b\xee\xbd\xec\x61\x90\xb7\xb6\xac\x83\x74\x85\xa6\x7b\x29\xa5\xc8\xb1\xec\xaa\xb5\x7e\x20\xcb\x19\x89\xd0\xff\x3e\x64\xc7\xa9\xbb\xd8\x59\xd2\x76\x7d\x58\x20\x0f\x96\x8e\xce\xf7\x7b\x8e\x8f\x3e\xd8\x98\x94\x64\x94\x13\xf0\x19\x96\x92\x28\x1f\x4e\xac\x45\x12\xcf\x9f\x70\x4e\xa0\x59\x43\x88\x32\x29\x94\x86\x00\x79\xc6\x00\xcd\x20\xfa\x82\xcb\x19\x65\xc4\x05\xfb\x39\xd5\x0f\x55\x12\xcd\x05\x8b\x73\x51\x60\x9e\xc7\x52\x09\x2d\x92\x2a\x8b\xa5\x5e\x4a\x52\xfa\x60\x0c\x10\x9e\x82\xb5\xc8\xeb\x86\x3f\xa9\xa5\xd4\x22\xa5\x8a\xcc\x75\x9c\x62\x8d\x13\x5c\x12\x7f\x47\x4c\xf3\x70\x52\xe7\x8f\x73\x11\x97\x44\x2d\x88\x92\x89\x8f\x9e\x7d\x9d\xf1\x8a\xfd\xea\xab\x57\x28\x36\x26\xba\x6a\x0a\xb5\xd6\xef\x58\x7c\xce\xf5\xf5\xfa\xdb\x65\x9d\x8b\xf0\xb9\x48\x29\xcf\xe3\xc7\x52\xf0\x4e\x6c\x88\x10\x72\x35\xba\x0a\xa3\x19\xd5\x05\xb1\x76\x5a\x37\x0d\x4a\xad\xaa\xb9\x06\x63\x51\x56\xf1\x39\x5c\x92\x1f\x5b\x31\x41\x08\xc7\x9b\x45\xd8\x9c\x34\xc8\x53\x44\x57\x8a\xc3\xd1\xf6\xae\xb1\xc8\xa2\x26\x65\xa0\x3a\xc7\xdb\xfd\x10\xa6\x58\x9e\x71\x3d\x13\x57\xae\x4b\x81\x48\x1e\xe1\xb8\x2d\x39\xea\xe6\x0b\x21\x90\x12\x8e\xdb\x1e\xbe\xd8\x1b\x03\x51\xca\xfd\x85\x0a\xc1\x20\x00\x80\x05\x56\xc0\xa0\x37\xda\xb5\x4c\x61\x9e\x13\x18\xdd\x8f\x61\xb4\x80\xcf\x13\x88\xce\x29\x29\xd2\xd2\x6d\xae\x1b\x3a\x5a\x44\x17\x9b\xa9\x81\xce\xda\x25\x2d\x0a\x9c\x14\xcd\x3a\xcd\x40\x24\x8f\xb7\xf4\xce\x29\xb8\xfd\xeb\xba\x8f\x75\x36\x6b\xe1\x9f\x09\x70\x5a\x80\x69\x47\xca\x4d\x2b\xac\x7f\x9e\x07\xac\xe7\x54\xdd\x87\xb6\xa4\x09\x34\x33\x19\x39\x23\xa5\xc6\x4c\x36\x6d\x32\x66\xb4\x88\x4e\x45\x6b\xc5\xda\x1d\x26\xc2\x41\xf3\xb6\x6b\xab\xae\x9b\x14\x25\xd9\xc4\xde\xdc\x5c\x9c\xd6\x71\x3b\x6c\x46\xdf\x71\x51\x11\x98\xb8\x2e\xf4\xaa\xbb\x27\xca\xf3\x20\xec\x11\xe8\xa6\xef\xcd\x0e\x13\xd8\xaa\x94\x72\xfd\xe9\xff\x60\x48\xae\x57\x86\xeb\x0f\xd1\x39\x2f\x04\x7e\x8d\x52\xe6\xce\xfd\xf7\xef\x41\x5a\x2d\x36\x76\x4b\xa9\x48\x0b\x63\xb4\xa2\x6c\x4d\x0e\x17\x39\x5b\x4a\xb2\x7e\x2b\x30\x6a\x91\x02\xd6\x9e\x71\xdd\x3b\x57\x7b\x7b\x6a\xf1\xb3\xc3\x53\x3b\xd5\x5b\x3a\x0e\x54\xd1\x14\xab\xf2\x01\x17\x7b\x35\xe2\x37\x73\xd9\xa7\x31\x94\x16\x5e\xc2\xb4\xbd\x10\xcf\x58\x63\xb5\x6d\x64\xf7\xe7\xd8\x14\xf3\x65\xcd\xb2\xdb\xbb\x5d\x34\xbb\xbd\xdb\x8b\x67\x1b\xa0\xad\x06\x4f\x20\x2f\x13\x0a\xe8\x18\xee\x1d\xcd\x1a\xba\x39\x7d\x83\xbc\x37\xd1\xf0\xcf\xe3\xf0\xaf\xc3\xe0\x90\x81\xb7\x92\x70\x03\xa4\xc1\x0a\xdf\x9f\x7d\x87\x48\xbd\x03\xfe\x0e\x91\xfb\x40\x02\x1e\x62\xeb\x3d\x21\xb8\x8f\xee\xeb\x38\x38\x78\x43\xfb\x51\xe8\x18\xb2\x82\x09\x38\xd4\xf1\x34\x58\x8d\xe1\x88\x85\xc8\xeb\x30\x72\xd5\x22\x12\xf5\x7c\xdb\xba\xac\x9a\x30\x59\x60\x4d\xc0\x27\xbc\x62\x0c\x4b\x2d\xea\xef\x62\x1f\x20\x02\xfb\xe2\x0a\x76\x19\xfc\x33\x00\x00\xff\xff\xe0\xc7\x8c\xee\xf1\x0b\x00\x00")

func templateMapperTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMapperTmpl,
		"template/mapper.tmpl",
	)
}

func templateMapperTmpl() (*asset, error) {
	bytes, err := templateMapperTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mapper.tmpl", size: 3057, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateProtobufTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x6f\xd4\x3c\x10\xbd\xe7\x57\x3c\x45\x3e\xb4\x52\x37\xfb\x7d\xe5\xb6\x51\x24\x0e\x14\xa8\x44\xa1\x12\xdb\xf3\xca\xbb\x99\x0d\xa6\x89\x1d\x62\x27\x50\x59\xfe\xef\x68\xbc\x36\xdd\x0a\xa9\x22\xa7\xcc\x78\xe6\xcd\x7b\xf3\xc6\xfb\x96\x8e\x4a\x13\xca\x71\x32\xce\xec\xe7\x63\x89\x55\x08\x85\x7d\xd2\x4e\xfe\x42\x93\xf2\x6f\xca\xba\x18\xe5\xe1\x51\x76\x04\x7b\xf8\x46\x83\xac\x0b\x33\x3a\x65\x34\x3a\xb3\xcb\x2f\x0d\xca\xaa\xb6\x34\x2d\x34\x8d\xfb\xb2\x2e\x0a\xef\xa1\x8e\xa8\x3e\x4a\xbb\x55\x03\x31\xb0\x1a\x46\x33\x39\x94\x9d\x31\x5d\x4f\xeb\x3c\x74\xed\xd4\x40\xd6\xc9\x61\xac\x62\xaa\xac\xbd\x27\xdd\x86\xc0\x10\x8e\x86\xb1\x97\x8e\x50\x9e\xba\x4b\x54\x91\xe3\x33\xfa\xc3\xc3\xed\x3b\x4e\x21\xc3\xcf\xb3\x6a\x33\x12\xbc\x07\xe9\x16\x21\x14\x03\x59\xcb\x44\xbd\x47\xb5\x55\xae\x27\x84\x00\x5f\x78\x2f\x0e\x66\xd6\x6e\xd3\xfc\x17\x61\x27\xa9\x3b\x82\xd8\x5d\x41\x2c\xd8\x34\xa8\xde\x2b\xea\x5b\x1b\x42\x01\xac\xd7\x78\xab\xf4\x77\x3a\xb8\x9d\x93\xdd\x06\xa5\xf7\xb0\x5a\x3e\x12\xc4\x52\x7d\x75\xd3\x7c\x70\xb1\x3a\x84\xb2\x00\x90\xa1\xd1\x40\xb6\x2d\x52\xf0\x7f\xe4\x8f\xf8\xce\x1a\xc4\x52\xdd\xda\x1b\x3d\x0f\xe7\x79\x41\x9c\xd8\x34\x70\x93\x1a\xee\xd3\x8a\xc5\x52\x6d\x9f\x46\xe2\x49\x4a\x77\x10\x55\x7e\xc8\x8d\xb1\xe9\x4f\x77\x94\x87\xf4\x79\xbf\x42\x92\x16\x69\x5c\x5f\x41\x10\x0f\x10\x4b\xc5\xc3\x2d\x12\x46\x2e\x16\x5a\x0e\xe7\x05\x9f\x39\x14\xf4\xb2\x2c\x55\x85\x80\x26\x46\x27\xe8\x10\xea\x17\x50\xc9\x00\x0e\xb3\x40\x96\xc2\x1e\x30\x47\x0e\x3e\xc9\x3d\xf5\x09\xe6\x84\x92\x41\xd8\xc0\xde\xc6\x19\xa7\xd2\xfb\x74\x36\xbc\x8a\x57\xdb\xcf\xbc\x8f\x07\x95\xee\xe6\x2f\x83\x3f\x90\xbe\x69\x3b\x3a\x59\xfc\x8f\xa6\x5d\x98\x89\x17\x73\x77\x7d\x87\x0b\x6d\x1c\xff\xf3\x29\x6a\xf5\x63\xa6\xcb\xcb\x78\x8e\x13\x8d\x24\x1d\xb5\x99\xc6\x2a\x93\xe5\x61\x5f\x7e\x6a\x9a\x5e\x17\xff\xcc\xb9\x48\x02\xf8\xf7\x77\x00\x00\x00\xff\xff\x6b\xa7\xfe\x6b\xb4\x03\x00\x00")

func templateProtobufTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateProtobufTmpl,
		"template/protobuf.tmpl",
	)
}

func templateProtobufTmpl() (*asset, error) {
	bytes, err := templateProtobufTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/protobuf.tmpl", size: 948, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUuidTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xb1\x0e\xc2\x20\x10\x06\xe0\xfd\x9e\xe2\xcf\xed\x9a\x18\x47\xd2\xcd\xc5\x07\xe8\x6c\xb0\x9c\x48\xb4\x40\x38\x68\x34\x84\x77\x37\x1d\x9c\xbf\xaf\x77\x38\x79\x84\x28\xe0\xd6\x82\x63\x1c\xc6\x20\xfd\xc6\x6a\x3f\x98\xc0\xb9\xa4\x9a\xce\x6c\x28\xdb\xe5\x65\xbd\x40\x97\xa7\xac\xd6\x50\xca\x35\xa4\x08\x9f\x6e\x7f\x99\xc0\x47\xa3\x52\x36\x29\xf9\xce\x86\x88\x56\x51\xdd\x65\x9e\xaf\x17\x74\x02\xb4\x96\x10\x3d\x36\xfb\x6e\xfb\x3f\x19\x1a\xd4\x3b\x24\x3a\x8c\xf1\x0b\x00\x00\xff\xff\xa0\x62\x4e\xad\x8a\x00\x00\x00")

func templateUuidTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUuidTmpl,
		"template/uuid.tmpl",
	)
}

func templateUuidTmpl() (*asset, error) {
	bytes, err := templateUuidTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/uuid.tmpl", size: 138, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/_enum.maptoent.tmpl_": template_enumMaptoentTmpl_,
	"template/enum.maptoproto.tmpl": templateEnumMaptoprotoTmpl,
	"template/enum.tmpl":            templateEnumTmpl,
	"template/import.tmpl":          templateImportTmpl,
	"template/mapper.tmpl":          templateMapperTmpl,
	"template/protobuf.tmpl":        templateProtobufTmpl,
	"template/uuid.tmpl":            templateUuidTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"_enum.maptoent.tmpl_": &bintree{template_enumMaptoentTmpl_, map[string]*bintree{}},
		"enum.maptoproto.tmpl": &bintree{templateEnumMaptoprotoTmpl, map[string]*bintree{}},
		"enum.tmpl":            &bintree{templateEnumTmpl, map[string]*bintree{}},
		"import.tmpl":          &bintree{templateImportTmpl, map[string]*bintree{}},
		"mapper.tmpl":          &bintree{templateMapperTmpl, map[string]*bintree{}},
		"protobuf.tmpl":        &bintree{templateProtobufTmpl, map[string]*bintree{}},
		"uuid.tmpl":            &bintree{templateUuidTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
